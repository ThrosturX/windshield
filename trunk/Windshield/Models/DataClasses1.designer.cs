#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18034
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Windshield.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="verk2013_hopur09")]
	public partial class DataClasses1DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertUserRating(UserRating instance);
    partial void UpdateUserRating(UserRating instance);
    partial void DeleteUserRating(UserRating instance);
    partial void InsertGroup(Group instance);
    partial void UpdateGroup(Group instance);
    partial void DeleteGroup(Group instance);
    partial void InsertGroupMember(GroupMember instance);
    partial void UpdateGroupMember(GroupMember instance);
    partial void DeleteGroupMember(GroupMember instance);
    partial void InsertAdmin(Admin instance);
    partial void UpdateAdmin(Admin instance);
    partial void DeleteAdmin(Admin instance);
    partial void InsertPlayer(Player instance);
    partial void UpdatePlayer(Player instance);
    partial void DeletePlayer(Player instance);
    partial void InsertUserProfile(UserProfile instance);
    partial void UpdateUserProfile(UserProfile instance);
    partial void DeleteUserProfile(UserProfile instance);
    partial void InsertBoard(Board instance);
    partial void UpdateBoard(Board instance);
    partial void DeleteBoard(Board instance);
    partial void InsertGame(Game instance);
    partial void UpdateGame(Game instance);
    partial void DeleteGame(Game instance);
    partial void InsertGameRating(GameRating instance);
    partial void UpdateGameRating(GameRating instance);
    partial void DeleteGameRating(GameRating instance);
    partial void InsertFriend(Friend instance);
    partial void UpdateFriend(Friend instance);
    partial void DeleteFriend(Friend instance);
    #endregion
		
		public DataClasses1DataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["verk2013_hopur09ConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<UserRating> UserRatings
		{
			get
			{
				return this.GetTable<UserRating>();
			}
		}
		
		public System.Data.Linq.Table<Group> Groups
		{
			get
			{
				return this.GetTable<Group>();
			}
		}
		
		public System.Data.Linq.Table<GroupMember> GroupMembers
		{
			get
			{
				return this.GetTable<GroupMember>();
			}
		}
		
		public System.Data.Linq.Table<Admin> Admins
		{
			get
			{
				return this.GetTable<Admin>();
			}
		}
		
		public System.Data.Linq.Table<Player> Players
		{
			get
			{
				return this.GetTable<Player>();
			}
		}
		
		public System.Data.Linq.Table<UserProfile> UserProfiles
		{
			get
			{
				return this.GetTable<UserProfile>();
			}
		}
		
		public System.Data.Linq.Table<Board> Boards
		{
			get
			{
				return this.GetTable<Board>();
			}
		}
		
		public System.Data.Linq.Table<Game> Games
		{
			get
			{
				return this.GetTable<Game>();
			}
		}
		
		public System.Data.Linq.Table<GameRating> GameRatings
		{
			get
			{
				return this.GetTable<GameRating>();
			}
		}
		
		public System.Data.Linq.Table<Friend> Friends
		{
			get
			{
				return this.GetTable<Friend>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Users")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _password;
		
		private System.DateTime _dateofSignup;
		
		private string _email;
		
		private int _userRating;
		
		private EntitySet<UserRating> _UserRatings;
		
		private EntitySet<UserRating> _UserRatings1;
		
		private EntitySet<GroupMember> _GroupMembers;
		
		private EntityRef<Admin> _Admin;
		
		private EntitySet<Player> _Players;
		
		private EntityRef<UserProfile> _UserProfile;
		
		private EntitySet<GameRating> _GameRatings;
		
		private EntitySet<Friend> _Friends;
		
		private EntitySet<Friend> _Friends1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnpasswordChanging(string value);
    partial void OnpasswordChanged();
    partial void OndateofSignupChanging(System.DateTime value);
    partial void OndateofSignupChanged();
    partial void OnemailChanging(string value);
    partial void OnemailChanged();
    partial void OnuserRatingChanging(int value);
    partial void OnuserRatingChanged();
    #endregion
		
		public User()
		{
			this._UserRatings = new EntitySet<UserRating>(new Action<UserRating>(this.attach_UserRatings), new Action<UserRating>(this.detach_UserRatings));
			this._UserRatings1 = new EntitySet<UserRating>(new Action<UserRating>(this.attach_UserRatings1), new Action<UserRating>(this.detach_UserRatings1));
			this._GroupMembers = new EntitySet<GroupMember>(new Action<GroupMember>(this.attach_GroupMembers), new Action<GroupMember>(this.detach_GroupMembers));
			this._Admin = default(EntityRef<Admin>);
			this._Players = new EntitySet<Player>(new Action<Player>(this.attach_Players), new Action<Player>(this.detach_Players));
			this._UserProfile = default(EntityRef<UserProfile>);
			this._GameRatings = new EntitySet<GameRating>(new Action<GameRating>(this.attach_GameRatings), new Action<GameRating>(this.detach_GameRatings));
			this._Friends = new EntitySet<Friend>(new Action<Friend>(this.attach_Friends), new Action<Friend>(this.detach_Friends));
			this._Friends1 = new EntitySet<Friend>(new Action<Friend>(this.attach_Friends1), new Action<Friend>(this.detach_Friends1));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_password", DbType="NVarChar(30) NOT NULL", CanBeNull=false)]
		public string password
		{
			get
			{
				return this._password;
			}
			set
			{
				if ((this._password != value))
				{
					this.OnpasswordChanging(value);
					this.SendPropertyChanging();
					this._password = value;
					this.SendPropertyChanged("password");
					this.OnpasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dateofSignup", DbType="DateTime NOT NULL")]
		public System.DateTime dateofSignup
		{
			get
			{
				return this._dateofSignup;
			}
			set
			{
				if ((this._dateofSignup != value))
				{
					this.OndateofSignupChanging(value);
					this.SendPropertyChanging();
					this._dateofSignup = value;
					this.SendPropertyChanged("dateofSignup");
					this.OndateofSignupChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_email", DbType="NVarChar(30) NOT NULL", CanBeNull=false)]
		public string email
		{
			get
			{
				return this._email;
			}
			set
			{
				if ((this._email != value))
				{
					this.OnemailChanging(value);
					this.SendPropertyChanging();
					this._email = value;
					this.SendPropertyChanged("email");
					this.OnemailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userRating", DbType="Int NOT NULL")]
		public int userRating
		{
			get
			{
				return this._userRating;
			}
			set
			{
				if ((this._userRating != value))
				{
					this.OnuserRatingChanging(value);
					this.SendPropertyChanging();
					this._userRating = value;
					this.SendPropertyChanged("userRating");
					this.OnuserRatingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserRating", Storage="_UserRatings", ThisKey="Id", OtherKey="idRater")]
		public EntitySet<UserRating> UserRatings
		{
			get
			{
				return this._UserRatings;
			}
			set
			{
				this._UserRatings.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserRating1", Storage="_UserRatings1", ThisKey="Id", OtherKey="idUser")]
		public EntitySet<UserRating> UserRatings1
		{
			get
			{
				return this._UserRatings1;
			}
			set
			{
				this._UserRatings1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_GroupMember", Storage="_GroupMembers", ThisKey="Id", OtherKey="idUser")]
		public EntitySet<GroupMember> GroupMembers
		{
			get
			{
				return this._GroupMembers;
			}
			set
			{
				this._GroupMembers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Admin", Storage="_Admin", ThisKey="Id", OtherKey="idUser", IsUnique=true, IsForeignKey=false)]
		public Admin Admin
		{
			get
			{
				return this._Admin.Entity;
			}
			set
			{
				Admin previousValue = this._Admin.Entity;
				if (((previousValue != value) 
							|| (this._Admin.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Admin.Entity = null;
						previousValue.User = null;
					}
					this._Admin.Entity = value;
					if ((value != null))
					{
						value.User = this;
					}
					this.SendPropertyChanged("Admin");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Player", Storage="_Players", ThisKey="Id", OtherKey="idUser")]
		public EntitySet<Player> Players
		{
			get
			{
				return this._Players;
			}
			set
			{
				this._Players.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserProfile", Storage="_UserProfile", ThisKey="Id", OtherKey="idUser", IsUnique=true, IsForeignKey=false)]
		public UserProfile UserProfile
		{
			get
			{
				return this._UserProfile.Entity;
			}
			set
			{
				UserProfile previousValue = this._UserProfile.Entity;
				if (((previousValue != value) 
							|| (this._UserProfile.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserProfile.Entity = null;
						previousValue.User = null;
					}
					this._UserProfile.Entity = value;
					if ((value != null))
					{
						value.User = this;
					}
					this.SendPropertyChanged("UserProfile");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_GameRating", Storage="_GameRatings", ThisKey="Id", OtherKey="idUser")]
		public EntitySet<GameRating> GameRatings
		{
			get
			{
				return this._GameRatings;
			}
			set
			{
				this._GameRatings.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Friend", Storage="_Friends", ThisKey="Id", OtherKey="idOne")]
		public EntitySet<Friend> Friends
		{
			get
			{
				return this._Friends;
			}
			set
			{
				this._Friends.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Friend1", Storage="_Friends1", ThisKey="Id", OtherKey="idTwo")]
		public EntitySet<Friend> Friends1
		{
			get
			{
				return this._Friends1;
			}
			set
			{
				this._Friends1.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserRatings(UserRating entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_UserRatings(UserRating entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_UserRatings1(UserRating entity)
		{
			this.SendPropertyChanging();
			entity.User1 = this;
		}
		
		private void detach_UserRatings1(UserRating entity)
		{
			this.SendPropertyChanging();
			entity.User1 = null;
		}
		
		private void attach_GroupMembers(GroupMember entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_GroupMembers(GroupMember entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Players(Player entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Players(Player entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_GameRatings(GameRating entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_GameRatings(GameRating entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Friends(Friend entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Friends(Friend entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Friends1(Friend entity)
		{
			this.SendPropertyChanging();
			entity.User1 = this;
		}
		
		private void detach_Friends1(Friend entity)
		{
			this.SendPropertyChanging();
			entity.User1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserRatings")]
	public partial class UserRating : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idRater;
		
		private int _idUser;
		
		private System.DateTime _date;
		
		private int _positive;
		
		private string _review;
		
		private EntityRef<User> _User;
		
		private EntityRef<User> _User1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidRaterChanging(int value);
    partial void OnidRaterChanged();
    partial void OnidUserChanging(int value);
    partial void OnidUserChanged();
    partial void OndateChanging(System.DateTime value);
    partial void OndateChanged();
    partial void OnpositiveChanging(int value);
    partial void OnpositiveChanged();
    partial void OnreviewChanging(string value);
    partial void OnreviewChanged();
    #endregion
		
		public UserRating()
		{
			this._User = default(EntityRef<User>);
			this._User1 = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idRater", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int idRater
		{
			get
			{
				return this._idRater;
			}
			set
			{
				if ((this._idRater != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidRaterChanging(value);
					this.SendPropertyChanging();
					this._idRater = value;
					this.SendPropertyChanged("idRater");
					this.OnidRaterChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idUser", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int idUser
		{
			get
			{
				return this._idUser;
			}
			set
			{
				if ((this._idUser != value))
				{
					if (this._User1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidUserChanging(value);
					this.SendPropertyChanging();
					this._idUser = value;
					this.SendPropertyChanged("idUser");
					this.OnidUserChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_date", DbType="DateTime NOT NULL")]
		public System.DateTime date
		{
			get
			{
				return this._date;
			}
			set
			{
				if ((this._date != value))
				{
					this.OndateChanging(value);
					this.SendPropertyChanging();
					this._date = value;
					this.SendPropertyChanged("date");
					this.OndateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_positive", DbType="Int NOT NULL")]
		public int positive
		{
			get
			{
				return this._positive;
			}
			set
			{
				if ((this._positive != value))
				{
					this.OnpositiveChanging(value);
					this.SendPropertyChanging();
					this._positive = value;
					this.SendPropertyChanged("positive");
					this.OnpositiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_review", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string review
		{
			get
			{
				return this._review;
			}
			set
			{
				if ((this._review != value))
				{
					this.OnreviewChanging(value);
					this.SendPropertyChanging();
					this._review = value;
					this.SendPropertyChanged("review");
					this.OnreviewChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserRating", Storage="_User", ThisKey="idRater", OtherKey="Id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.UserRatings.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.UserRatings.Add(this);
						this._idRater = value.Id;
					}
					else
					{
						this._idRater = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserRating1", Storage="_User1", ThisKey="idUser", OtherKey="Id", IsForeignKey=true)]
		public User User1
		{
			get
			{
				return this._User1.Entity;
			}
			set
			{
				User previousValue = this._User1.Entity;
				if (((previousValue != value) 
							|| (this._User1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User1.Entity = null;
						previousValue.UserRatings1.Remove(this);
					}
					this._User1.Entity = value;
					if ((value != null))
					{
						value.UserRatings1.Add(this);
						this._idUser = value.Id;
					}
					else
					{
						this._idUser = default(int);
					}
					this.SendPropertyChanged("User1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Groups")]
	public partial class Group : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.DateTime _date;
		
		private string _name;
		
		private string _description;
		
		private string _owner;
		
		private EntitySet<GroupMember> _GroupMembers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OndateChanging(System.DateTime value);
    partial void OndateChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OndescriptionChanging(string value);
    partial void OndescriptionChanged();
    partial void OnownerChanging(string value);
    partial void OnownerChanged();
    #endregion
		
		public Group()
		{
			this._GroupMembers = new EntitySet<GroupMember>(new Action<GroupMember>(this.attach_GroupMembers), new Action<GroupMember>(this.detach_GroupMembers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_date", DbType="DateTime NOT NULL")]
		public System.DateTime date
		{
			get
			{
				return this._date;
			}
			set
			{
				if ((this._date != value))
				{
					this.OndateChanging(value);
					this.SendPropertyChanging();
					this._date = value;
					this.SendPropertyChanged("date");
					this.OndateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(30) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_description", DbType="NVarChar(MAX)")]
		public string description
		{
			get
			{
				return this._description;
			}
			set
			{
				if ((this._description != value))
				{
					this.OndescriptionChanging(value);
					this.SendPropertyChanging();
					this._description = value;
					this.SendPropertyChanged("description");
					this.OndescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_owner", DbType="NVarChar(30) NOT NULL", CanBeNull=false)]
		public string owner
		{
			get
			{
				return this._owner;
			}
			set
			{
				if ((this._owner != value))
				{
					this.OnownerChanging(value);
					this.SendPropertyChanging();
					this._owner = value;
					this.SendPropertyChanged("owner");
					this.OnownerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Group_GroupMember", Storage="_GroupMembers", ThisKey="Id", OtherKey="idGroup")]
		public EntitySet<GroupMember> GroupMembers
		{
			get
			{
				return this._GroupMembers;
			}
			set
			{
				this._GroupMembers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_GroupMembers(GroupMember entity)
		{
			this.SendPropertyChanging();
			entity.Group = this;
		}
		
		private void detach_GroupMembers(GroupMember entity)
		{
			this.SendPropertyChanging();
			entity.Group = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.GroupMembers")]
	public partial class GroupMember : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idGroup;
		
		private int _idUser;
		
		private System.DateTime _date;
		
		private EntityRef<Group> _Group;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidGroupChanging(int value);
    partial void OnidGroupChanged();
    partial void OnidUserChanging(int value);
    partial void OnidUserChanged();
    partial void OndateChanging(System.DateTime value);
    partial void OndateChanged();
    #endregion
		
		public GroupMember()
		{
			this._Group = default(EntityRef<Group>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idGroup", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int idGroup
		{
			get
			{
				return this._idGroup;
			}
			set
			{
				if ((this._idGroup != value))
				{
					if (this._Group.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidGroupChanging(value);
					this.SendPropertyChanging();
					this._idGroup = value;
					this.SendPropertyChanged("idGroup");
					this.OnidGroupChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idUser", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int idUser
		{
			get
			{
				return this._idUser;
			}
			set
			{
				if ((this._idUser != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidUserChanging(value);
					this.SendPropertyChanging();
					this._idUser = value;
					this.SendPropertyChanged("idUser");
					this.OnidUserChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_date", DbType="DateTime NOT NULL")]
		public System.DateTime date
		{
			get
			{
				return this._date;
			}
			set
			{
				if ((this._date != value))
				{
					this.OndateChanging(value);
					this.SendPropertyChanging();
					this._date = value;
					this.SendPropertyChanged("date");
					this.OndateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Group_GroupMember", Storage="_Group", ThisKey="idGroup", OtherKey="Id", IsForeignKey=true)]
		public Group Group
		{
			get
			{
				return this._Group.Entity;
			}
			set
			{
				Group previousValue = this._Group.Entity;
				if (((previousValue != value) 
							|| (this._Group.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Group.Entity = null;
						previousValue.GroupMembers.Remove(this);
					}
					this._Group.Entity = value;
					if ((value != null))
					{
						value.GroupMembers.Add(this);
						this._idGroup = value.Id;
					}
					else
					{
						this._idGroup = default(int);
					}
					this.SendPropertyChanged("Group");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_GroupMember", Storage="_User", ThisKey="idUser", OtherKey="Id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.GroupMembers.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.GroupMembers.Add(this);
						this._idUser = value.Id;
					}
					else
					{
						this._idUser = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Admins")]
	public partial class Admin : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idUser;
		
		private System.DateTime _date;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidUserChanging(int value);
    partial void OnidUserChanged();
    partial void OndateChanging(System.DateTime value);
    partial void OndateChanged();
    #endregion
		
		public Admin()
		{
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idUser", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int idUser
		{
			get
			{
				return this._idUser;
			}
			set
			{
				if ((this._idUser != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidUserChanging(value);
					this.SendPropertyChanging();
					this._idUser = value;
					this.SendPropertyChanged("idUser");
					this.OnidUserChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_date", DbType="DateTime NOT NULL")]
		public System.DateTime date
		{
			get
			{
				return this._date;
			}
			set
			{
				if ((this._date != value))
				{
					this.OndateChanging(value);
					this.SendPropertyChanging();
					this._date = value;
					this.SendPropertyChanged("date");
					this.OndateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Admin", Storage="_User", ThisKey="idUser", OtherKey="Id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Admin = null;
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Admin = this;
						this._idUser = value.Id;
					}
					else
					{
						this._idUser = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Players")]
	public partial class Player : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idUser;
		
		private int _idBoard;
		
		private int _playerNumber;
		
		private System.DateTime _dateJoined;
		
		private EntityRef<User> _User;
		
		private EntityRef<Board> _Board;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidUserChanging(int value);
    partial void OnidUserChanged();
    partial void OnidBoardChanging(int value);
    partial void OnidBoardChanged();
    partial void OnplayerNumberChanging(int value);
    partial void OnplayerNumberChanged();
    partial void OndateJoinedChanging(System.DateTime value);
    partial void OndateJoinedChanged();
    #endregion
		
		public Player()
		{
			this._User = default(EntityRef<User>);
			this._Board = default(EntityRef<Board>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idUser", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int idUser
		{
			get
			{
				return this._idUser;
			}
			set
			{
				if ((this._idUser != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidUserChanging(value);
					this.SendPropertyChanging();
					this._idUser = value;
					this.SendPropertyChanged("idUser");
					this.OnidUserChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idBoard", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int idBoard
		{
			get
			{
				return this._idBoard;
			}
			set
			{
				if ((this._idBoard != value))
				{
					if (this._Board.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidBoardChanging(value);
					this.SendPropertyChanging();
					this._idBoard = value;
					this.SendPropertyChanged("idBoard");
					this.OnidBoardChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_playerNumber", DbType="Int NOT NULL")]
		public int playerNumber
		{
			get
			{
				return this._playerNumber;
			}
			set
			{
				if ((this._playerNumber != value))
				{
					this.OnplayerNumberChanging(value);
					this.SendPropertyChanging();
					this._playerNumber = value;
					this.SendPropertyChanged("playerNumber");
					this.OnplayerNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dateJoined", DbType="DateTime NOT NULL")]
		public System.DateTime dateJoined
		{
			get
			{
				return this._dateJoined;
			}
			set
			{
				if ((this._dateJoined != value))
				{
					this.OndateJoinedChanging(value);
					this.SendPropertyChanging();
					this._dateJoined = value;
					this.SendPropertyChanged("dateJoined");
					this.OndateJoinedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Player", Storage="_User", ThisKey="idUser", OtherKey="Id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Players.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Players.Add(this);
						this._idUser = value.Id;
					}
					else
					{
						this._idUser = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Board_Player", Storage="_Board", ThisKey="idBoard", OtherKey="Id", IsForeignKey=true)]
		public Board Board
		{
			get
			{
				return this._Board.Entity;
			}
			set
			{
				Board previousValue = this._Board.Entity;
				if (((previousValue != value) 
							|| (this._Board.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Board.Entity = null;
						previousValue.Players.Remove(this);
					}
					this._Board.Entity = value;
					if ((value != null))
					{
						value.Players.Add(this);
						this._idBoard = value.Id;
					}
					else
					{
						this._idBoard = default(int);
					}
					this.SendPropertyChanged("Board");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserProfiles")]
	public partial class UserProfile : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idUser;
		
		private string _avatar;
		
		private string _country;
		
		private string _occupation;
		
		private string _settings;
		
		private string _name;
		
		private int _age;
		
		private int _gender;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidUserChanging(int value);
    partial void OnidUserChanged();
    partial void OnavatarChanging(string value);
    partial void OnavatarChanged();
    partial void OncountryChanging(string value);
    partial void OncountryChanged();
    partial void OnoccupationChanging(string value);
    partial void OnoccupationChanged();
    partial void OnsettingsChanging(string value);
    partial void OnsettingsChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnageChanging(int value);
    partial void OnageChanged();
    partial void OngenderChanging(int value);
    partial void OngenderChanged();
    #endregion
		
		public UserProfile()
		{
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idUser", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int idUser
		{
			get
			{
				return this._idUser;
			}
			set
			{
				if ((this._idUser != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidUserChanging(value);
					this.SendPropertyChanging();
					this._idUser = value;
					this.SendPropertyChanged("idUser");
					this.OnidUserChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_avatar", DbType="NVarChar(100)")]
		public string avatar
		{
			get
			{
				return this._avatar;
			}
			set
			{
				if ((this._avatar != value))
				{
					this.OnavatarChanging(value);
					this.SendPropertyChanging();
					this._avatar = value;
					this.SendPropertyChanged("avatar");
					this.OnavatarChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_country", DbType="NVarChar(50)")]
		public string country
		{
			get
			{
				return this._country;
			}
			set
			{
				if ((this._country != value))
				{
					this.OncountryChanging(value);
					this.SendPropertyChanging();
					this._country = value;
					this.SendPropertyChanged("country");
					this.OncountryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_occupation", DbType="NVarChar(50)")]
		public string occupation
		{
			get
			{
				return this._occupation;
			}
			set
			{
				if ((this._occupation != value))
				{
					this.OnoccupationChanging(value);
					this.SendPropertyChanging();
					this._occupation = value;
					this.SendPropertyChanged("occupation");
					this.OnoccupationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_settings", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string settings
		{
			get
			{
				return this._settings;
			}
			set
			{
				if ((this._settings != value))
				{
					this.OnsettingsChanging(value);
					this.SendPropertyChanging();
					this._settings = value;
					this.SendPropertyChanged("settings");
					this.OnsettingsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_age", DbType="Int NOT NULL")]
		public int age
		{
			get
			{
				return this._age;
			}
			set
			{
				if ((this._age != value))
				{
					this.OnageChanging(value);
					this.SendPropertyChanging();
					this._age = value;
					this.SendPropertyChanged("age");
					this.OnageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_gender", DbType="Int NOT NULL")]
		public int gender
		{
			get
			{
				return this._gender;
			}
			set
			{
				if ((this._gender != value))
				{
					this.OngenderChanging(value);
					this.SendPropertyChanging();
					this._gender = value;
					this.SendPropertyChanged("gender");
					this.OngenderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserProfile", Storage="_User", ThisKey="idUser", OtherKey="Id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.UserProfile = null;
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.UserProfile = this;
						this._idUser = value.Id;
					}
					else
					{
						this._idUser = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Boards")]
	public partial class Board : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.DateTime _startDate;
		
		private System.DateTime _endDate;
		
		private int _idOwner;
		
		private string _status;
		
		private int _idGame;
		
		private EntitySet<Player> _Players;
		
		private EntityRef<Game> _Game;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnstartDateChanging(System.DateTime value);
    partial void OnstartDateChanged();
    partial void OnendDateChanging(System.DateTime value);
    partial void OnendDateChanged();
    partial void OnidOwnerChanging(int value);
    partial void OnidOwnerChanged();
    partial void OnstatusChanging(string value);
    partial void OnstatusChanged();
    partial void OnidGameChanging(int value);
    partial void OnidGameChanged();
    #endregion
		
		public Board()
		{
			this._Players = new EntitySet<Player>(new Action<Player>(this.attach_Players), new Action<Player>(this.detach_Players));
			this._Game = default(EntityRef<Game>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_startDate", DbType="DateTime NOT NULL")]
		public System.DateTime startDate
		{
			get
			{
				return this._startDate;
			}
			set
			{
				if ((this._startDate != value))
				{
					this.OnstartDateChanging(value);
					this.SendPropertyChanging();
					this._startDate = value;
					this.SendPropertyChanged("startDate");
					this.OnstartDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_endDate", DbType="DateTime NOT NULL")]
		public System.DateTime endDate
		{
			get
			{
				return this._endDate;
			}
			set
			{
				if ((this._endDate != value))
				{
					this.OnendDateChanging(value);
					this.SendPropertyChanging();
					this._endDate = value;
					this.SendPropertyChanged("endDate");
					this.OnendDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idOwner", DbType="Int NOT NULL")]
		public int idOwner
		{
			get
			{
				return this._idOwner;
			}
			set
			{
				if ((this._idOwner != value))
				{
					this.OnidOwnerChanging(value);
					this.SendPropertyChanging();
					this._idOwner = value;
					this.SendPropertyChanged("idOwner");
					this.OnidOwnerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_status", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string status
		{
			get
			{
				return this._status;
			}
			set
			{
				if ((this._status != value))
				{
					this.OnstatusChanging(value);
					this.SendPropertyChanging();
					this._status = value;
					this.SendPropertyChanged("status");
					this.OnstatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idGame", DbType="Int NOT NULL")]
		public int idGame
		{
			get
			{
				return this._idGame;
			}
			set
			{
				if ((this._idGame != value))
				{
					if (this._Game.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidGameChanging(value);
					this.SendPropertyChanging();
					this._idGame = value;
					this.SendPropertyChanged("idGame");
					this.OnidGameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Board_Player", Storage="_Players", ThisKey="Id", OtherKey="idBoard")]
		public EntitySet<Player> Players
		{
			get
			{
				return this._Players;
			}
			set
			{
				this._Players.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Game_Board", Storage="_Game", ThisKey="idGame", OtherKey="id", IsForeignKey=true)]
		public Game Game
		{
			get
			{
				return this._Game.Entity;
			}
			set
			{
				Game previousValue = this._Game.Entity;
				if (((previousValue != value) 
							|| (this._Game.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Game.Entity = null;
						previousValue.Boards.Remove(this);
					}
					this._Game.Entity = value;
					if ((value != null))
					{
						value.Boards.Add(this);
						this._idGame = value.id;
					}
					else
					{
						this._idGame = default(int);
					}
					this.SendPropertyChanged("Game");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Players(Player entity)
		{
			this.SendPropertyChanging();
			entity.Board = this;
		}
		
		private void detach_Players(Player entity)
		{
			this.SendPropertyChanging();
			entity.Board = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Games")]
	public partial class Game : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _name;
		
		private string _rules;
		
		private string _description;
		
		private int _minPlayers;
		
		private int _maxPlayers;
		
		private int _timesPlayed;
		
		private EntitySet<Board> _Boards;
		
		private EntitySet<GameRating> _GameRatings;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnrulesChanging(string value);
    partial void OnrulesChanged();
    partial void OndescriptionChanging(string value);
    partial void OndescriptionChanged();
    partial void OnminPlayersChanging(int value);
    partial void OnminPlayersChanged();
    partial void OnmaxPlayersChanging(int value);
    partial void OnmaxPlayersChanged();
    partial void OntimesPlayedChanging(int value);
    partial void OntimesPlayedChanged();
    #endregion
		
		public Game()
		{
			this._Boards = new EntitySet<Board>(new Action<Board>(this.attach_Boards), new Action<Board>(this.detach_Boards));
			this._GameRatings = new EntitySet<GameRating>(new Action<GameRating>(this.attach_GameRatings), new Action<GameRating>(this.detach_GameRatings));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(30) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_rules", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string rules
		{
			get
			{
				return this._rules;
			}
			set
			{
				if ((this._rules != value))
				{
					this.OnrulesChanging(value);
					this.SendPropertyChanging();
					this._rules = value;
					this.SendPropertyChanged("rules");
					this.OnrulesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_description", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string description
		{
			get
			{
				return this._description;
			}
			set
			{
				if ((this._description != value))
				{
					this.OndescriptionChanging(value);
					this.SendPropertyChanging();
					this._description = value;
					this.SendPropertyChanged("description");
					this.OndescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_minPlayers", DbType="Int NOT NULL")]
		public int minPlayers
		{
			get
			{
				return this._minPlayers;
			}
			set
			{
				if ((this._minPlayers != value))
				{
					this.OnminPlayersChanging(value);
					this.SendPropertyChanging();
					this._minPlayers = value;
					this.SendPropertyChanged("minPlayers");
					this.OnminPlayersChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_maxPlayers", DbType="Int NOT NULL")]
		public int maxPlayers
		{
			get
			{
				return this._maxPlayers;
			}
			set
			{
				if ((this._maxPlayers != value))
				{
					this.OnmaxPlayersChanging(value);
					this.SendPropertyChanging();
					this._maxPlayers = value;
					this.SendPropertyChanged("maxPlayers");
					this.OnmaxPlayersChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_timesPlayed", DbType="Int NOT NULL")]
		public int timesPlayed
		{
			get
			{
				return this._timesPlayed;
			}
			set
			{
				if ((this._timesPlayed != value))
				{
					this.OntimesPlayedChanging(value);
					this.SendPropertyChanging();
					this._timesPlayed = value;
					this.SendPropertyChanged("timesPlayed");
					this.OntimesPlayedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Game_Board", Storage="_Boards", ThisKey="id", OtherKey="idGame")]
		public EntitySet<Board> Boards
		{
			get
			{
				return this._Boards;
			}
			set
			{
				this._Boards.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Game_GameRating", Storage="_GameRatings", ThisKey="id", OtherKey="idGame")]
		public EntitySet<GameRating> GameRatings
		{
			get
			{
				return this._GameRatings;
			}
			set
			{
				this._GameRatings.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Boards(Board entity)
		{
			this.SendPropertyChanging();
			entity.Game = this;
		}
		
		private void detach_Boards(Board entity)
		{
			this.SendPropertyChanging();
			entity.Game = null;
		}
		
		private void attach_GameRatings(GameRating entity)
		{
			this.SendPropertyChanging();
			entity.Game = this;
		}
		
		private void detach_GameRatings(GameRating entity)
		{
			this.SendPropertyChanging();
			entity.Game = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.GameRatings")]
	public partial class GameRating : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idGame;
		
		private int _idUser;
		
		private int _rating;
		
		private EntityRef<Game> _Game;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidGameChanging(int value);
    partial void OnidGameChanged();
    partial void OnidUserChanging(int value);
    partial void OnidUserChanged();
    partial void OnratingChanging(int value);
    partial void OnratingChanged();
    #endregion
		
		public GameRating()
		{
			this._Game = default(EntityRef<Game>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idGame", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int idGame
		{
			get
			{
				return this._idGame;
			}
			set
			{
				if ((this._idGame != value))
				{
					if (this._Game.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidGameChanging(value);
					this.SendPropertyChanging();
					this._idGame = value;
					this.SendPropertyChanged("idGame");
					this.OnidGameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idUser", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int idUser
		{
			get
			{
				return this._idUser;
			}
			set
			{
				if ((this._idUser != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidUserChanging(value);
					this.SendPropertyChanging();
					this._idUser = value;
					this.SendPropertyChanged("idUser");
					this.OnidUserChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_rating", DbType="Int NOT NULL")]
		public int rating
		{
			get
			{
				return this._rating;
			}
			set
			{
				if ((this._rating != value))
				{
					this.OnratingChanging(value);
					this.SendPropertyChanging();
					this._rating = value;
					this.SendPropertyChanged("rating");
					this.OnratingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Game_GameRating", Storage="_Game", ThisKey="idGame", OtherKey="id", IsForeignKey=true)]
		public Game Game
		{
			get
			{
				return this._Game.Entity;
			}
			set
			{
				Game previousValue = this._Game.Entity;
				if (((previousValue != value) 
							|| (this._Game.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Game.Entity = null;
						previousValue.GameRatings.Remove(this);
					}
					this._Game.Entity = value;
					if ((value != null))
					{
						value.GameRatings.Add(this);
						this._idGame = value.id;
					}
					else
					{
						this._idGame = default(int);
					}
					this.SendPropertyChanged("Game");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_GameRating", Storage="_User", ThisKey="idUser", OtherKey="Id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.GameRatings.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.GameRatings.Add(this);
						this._idUser = value.Id;
					}
					else
					{
						this._idUser = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Friends")]
	public partial class Friend : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idOne;
		
		private int _idTwo;
		
		private System.DateTime _date;
		
		private EntityRef<User> _User;
		
		private EntityRef<User> _User1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidOneChanging(int value);
    partial void OnidOneChanged();
    partial void OnidTwoChanging(int value);
    partial void OnidTwoChanged();
    partial void OndateChanging(System.DateTime value);
    partial void OndateChanged();
    #endregion
		
		public Friend()
		{
			this._User = default(EntityRef<User>);
			this._User1 = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idOne", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int idOne
		{
			get
			{
				return this._idOne;
			}
			set
			{
				if ((this._idOne != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidOneChanging(value);
					this.SendPropertyChanging();
					this._idOne = value;
					this.SendPropertyChanged("idOne");
					this.OnidOneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idTwo", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int idTwo
		{
			get
			{
				return this._idTwo;
			}
			set
			{
				if ((this._idTwo != value))
				{
					if (this._User1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidTwoChanging(value);
					this.SendPropertyChanging();
					this._idTwo = value;
					this.SendPropertyChanged("idTwo");
					this.OnidTwoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_date", DbType="DateTime NOT NULL")]
		public System.DateTime date
		{
			get
			{
				return this._date;
			}
			set
			{
				if ((this._date != value))
				{
					this.OndateChanging(value);
					this.SendPropertyChanging();
					this._date = value;
					this.SendPropertyChanged("date");
					this.OndateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Friend", Storage="_User", ThisKey="idOne", OtherKey="Id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Friends.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Friends.Add(this);
						this._idOne = value.Id;
					}
					else
					{
						this._idOne = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Friend1", Storage="_User1", ThisKey="idTwo", OtherKey="Id", IsForeignKey=true)]
		public User User1
		{
			get
			{
				return this._User1.Entity;
			}
			set
			{
				User previousValue = this._User1.Entity;
				if (((previousValue != value) 
							|| (this._User1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User1.Entity = null;
						previousValue.Friends1.Remove(this);
					}
					this._User1.Entity = value;
					if ((value != null))
					{
						value.Friends1.Add(this);
						this._idTwo = value.Id;
					}
					else
					{
						this._idTwo = default(int);
					}
					this.SendPropertyChanged("User1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
